var searchIndex = {};
searchIndex["quick_xml"] = {"doc":"High performance xml reader/writer.","items":[[3,"XmlReader","quick_xml","A Xml reader",null,null],[3,"Element","","General content of an event (aka node)",null,null],[3,"XmlDecl","","Wrapper around `Element` to parse `XmlDecl`",null,null],[3,"XmlWriter","","Xml writer",null,null],[4,"Event","","Event to interprete node as they are parsed",null,null],[13,"Start","","&lt;...&gt; eventually with attributes",0,null],[13,"End","","&lt;/...&gt;",0,null],[13,"Text","","Data between Start and End element",0,null],[13,"Comment","","Comment &lt;!-- ... --&gt;",0,null],[13,"CData","","CData &lt;![CDATA[...]]&gt;",0,null],[13,"Decl","","Xml declaration &lt;?xml ...?&gt;",0,null],[13,"PI","","Processing instruction &lt;?...?&gt;",0,null],[13,"DocType","","Doctype &lt;!DOCTYPE...&gt;",0,null],[0,"error","","Error management module",null,null],[4,"Error","quick_xml::error","An error produced by an operation on Xml data.",null,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",1,null],[13,"EOL","","An error originating from finding end of line instead of a column.",1,null],[13,"Utf8","","An error while converting to utf8",1,null],[13,"Malformed","","Xml is malformed",1,null],[13,"Unexpected","","Unexpected",1,null],[6,"Result","","Result type",null,null],[6,"ResultPos","","Result type with position",null,null],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[0,"attributes","quick_xml","Xml Attributes module",null,null],[3,"Attributes","quick_xml::attributes","Iterator over attributes key/value pairs",null,null],[3,"UnescapedAttributes","","Escaped attributes",null,null],[11,"clone","","",2,{"inputs":[{"name":"attributes"}],"output":{"name":"attributes"}}],[11,"new","","creates a new attribute from a buffer",2,null],[11,"unescaped","","gets unescaped variant",2,{"inputs":[{"name":"attributes"}],"output":{"name":"unescapedattributes"}}],[11,"with_checks","","check if attributes are distincts",2,{"inputs":[{"name":"attributes"},{"name":"bool"}],"output":{"name":"attributes"}}],[11,"next","","",2,{"inputs":[{"name":"attributes"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"unescapedattributes"}],"output":{"name":"option"}}],[0,"namespace","quick_xml","Module for managing `XmlnsReader` iterator",null,null],[3,"XmlnsReader","quick_xml::namespace","`XmlnsReader` iterator which wraps `XmlReader` iterator and\nadds namespace resolutions",null,null],[11,"clone","","",4,{"inputs":[{"name":"xmlnsreader"}],"output":{"name":"xmlnsreader"}}],[11,"new","","Converts a `XmlReader` into a `XmlnsReader` iterator",4,{"inputs":[{"name":"xmlreader"}],"output":{"name":"xmlnsreader"}}],[11,"resolve","","Resolves a qualified name into (namespace value, local name)",4,null],[11,"next","","",4,{"inputs":[{"name":"xmlnsreader"}],"output":{"name":"option"}}],[8,"AsStr","quick_xml","A trait to support on-demand conversion from UTF-8",null,null],[10,"as_str","","Converts this to an `&amp;str`",5,{"inputs":[{"name":"asstr"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"xmlreader"}],"output":{"name":"xmlreader"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"xmlreader"}}],[11,"from_reader","","Creates a XmlReader from a generic BufReader",6,{"inputs":[{"name":"b"}],"output":{"name":"xmlreader"}}],[11,"namespaced","","Converts into a `XmlnsReader` iterator",6,{"inputs":[{"name":"xmlreader"}],"output":{"name":"xmlnsreader"}}],[11,"trim_text","","Change trim_text default behaviour (false per default)",6,{"inputs":[{"name":"xmlreader"},{"name":"bool"}],"output":{"name":"xmlreader"}}],[11,"with_check","","Change default with_check (true per default)",6,{"inputs":[{"name":"xmlreader"},{"name":"bool"}],"output":{"name":"xmlreader"}}],[11,"check_comments","","Change default check_comment (false per default)",6,{"inputs":[{"name":"xmlreader"},{"name":"bool"}],"output":{"name":"xmlreader"}}],[11,"read_to_end","","Reads until end element is found",6,{"inputs":[{"name":"xmlreader"},{"name":"k"}],"output":{"name":"resultpos"}}],[11,"read_text","","Reads next event, if `Event::Text` or `Event::End`,\nthen returns a `String`, else returns an error",6,{"inputs":[{"name":"xmlreader"},{"name":"k"}],"output":{"name":"resultpos"}}],[11,"buffer_position","","Gets the current BufRead position\nUseful when debugging errors",6,{"inputs":[{"name":"xmlreader"}],"output":{"name":"usize"}}],[11,"from_file","","Creates a xml reader from a file path",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"next","","",6,{"inputs":[{"name":"xmlreader"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"element"}],"output":{"name":"element"}}],[11,"new","","Creates a new Element from the given name.\nname is a reference that can be converted to a byte slice, such as &amp;[u8] or &amp;str",7,{"inputs":[{"name":"a"}],"output":{"name":"element"}}],[11,"with_attributes","","Consumes self and adds attributes to this element from an iterator\nover (key, value) tuples.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,{"inputs":[{"name":"element"},{"name":"i"}],"output":{"name":"self"}}],[11,"name","","name as &amp;[u8] (without eventual attributes)",7,null],[11,"content","","whole content as &amp;[u8] (including eventual attributes)",7,null],[11,"unescaped_content","","gets escaped content",7,{"inputs":[{"name":"element"}],"output":{"name":"resultpos"}}],[11,"attributes","","gets attributes iterator",7,{"inputs":[{"name":"element"}],"output":{"name":"attributes"}}],[11,"unescaped_attributes","","gets attributes iterator whose attribute values are unescaped (&#39;&amp;...;&#39; replaced\nby their corresponding cgaracter)",7,{"inputs":[{"name":"element"}],"output":{"name":"unescapedattributes"}}],[11,"extend_attributes","","extend the attributes of this element from an iterator over (key, value) tuples.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,{"inputs":[{"name":"element"},{"name":"i"}],"output":{"name":"element"}}],[11,"into_string","","consumes entire self (including eventual attributes!) and returns `String`",7,{"inputs":[{"name":"element"}],"output":{"name":"result"}}],[11,"push_attribute","","Adds an attribute to this element from the given key and value.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,{"inputs":[{"name":"element"},{"name":"k"},{"name":"v"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"element"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"xmldecl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"xmldecl"}],"output":{"name":"xmldecl"}}],[11,"version","","Gets xml version, including quotes (&#39; or &quot;)",8,{"inputs":[{"name":"xmldecl"}],"output":{"name":"resultpos"}}],[11,"encoding","","Gets xml encoding, including quotes (&#39; or &quot;)",8,{"inputs":[{"name":"xmldecl"}],"output":{"name":"option"}}],[11,"standalone","","Gets xml standalone, including quotes (&#39; or &quot;)",8,{"inputs":[{"name":"xmldecl"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"element","","returns inner Element for the event",0,{"inputs":[{"name":"event"}],"output":{"name":"element"}}],[11,"clone","","",9,{"inputs":[{"name":"xmlwriter"}],"output":{"name":"xmlwriter"}}],[11,"new","","Creates a XmlWriter from a generic Write",9,{"inputs":[{"name":"w"}],"output":{"name":"xmlwriter"}}],[11,"into_inner","","Consumes this Xml Writer, returning the underlying writer.",9,{"inputs":[{"name":"xmlwriter"}],"output":{"name":"w"}}],[11,"write","","Writes the given event to the underlying writer.",9,{"inputs":[{"name":"xmlwriter"},{"name":"event"}],"output":{"name":"result"}}]],"paths":[[4,"Event"],[4,"Error"],[3,"Attributes"],[3,"UnescapedAttributes"],[3,"XmlnsReader"],[8,"AsStr"],[3,"XmlReader"],[3,"Element"],[3,"XmlDecl"],[3,"XmlWriter"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
